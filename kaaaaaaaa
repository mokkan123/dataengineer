I

Stale network state after Envoy crash

Envoy or sidecar components may have left half-open TCP connections.

When Kafdrop attempts to reuse these connections, the OS closes them with RST.

Protocol/Security mismatch on redirected broker connection

CLI may be using client.properties with SASL_SSL, while Kafdrop defaults to PLAINTEXT.

On redirected calls (e.g., FindCoordinator), this mismatch causes Kafdrop to abort the connection.

JVM caching issues

Kafdrop JVM may have cached DNS or connection pool state pointing to unreachable hosts following the Envoy crash.

CLI tools avoid this by resolving fresh on every execution.

5. Next Steps (Verification)

Increase Kafdrop log verbosity to confirm which host/port it is attempting to connect to:

-Dlogging.level.org.apache.kafka=DEBUG
-Djavax.net.debug=ssl,handshake


Test direct reachability of the failing host/port from the Kafdrop server:

nc -vz <host> <port>
openssl s_client -connect <host>:<port> -servername <host>


Review Envoy configuration:

Ensure it is running in L4 passthrough mode.

Confirm that all broker hostnames are resolvable from Kafdrop.

Restart the Kafdrop JVM to clear any stale connection state or DNS caches left after the Envoy crash.

✅ Summary: The Kafka cluster is operating normally. Failures are isolated to Kafdrop, triggered during FindCoordinator calls. Evidence suggests the root cause lies in stale connections or protocol/security mismatches introduced after the Envoy crash. Further validation requires debugging connection details, verifying network reachability, and confirming Envoy’s proxy configuration.

Would you like me to also create a one-page executive “post-mortem style” version (with Impact → Root Cause → Resolution → Action Items) that’s lighter for management audiences?
